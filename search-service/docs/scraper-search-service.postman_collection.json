{
	"info": {
		"_postman_id": "dd5f04d7-bbc2-4823-be61-14cbe21d789a",
		"name": "pt-scraper",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "search",
			"item": [
				{
					"name": "preflight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24598d04-f094-4a33-8c6f-3390696d93bb",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is empty\", () => {",
									"    pm.responseBody === null",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SERVICE}}/search",
							"host": [
								"{{SERVICE}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": [
						{
							"name": "create search",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 1,\n    \"params\": {\n        \"minYear\": \"1999\",\n        \"maxYear\": 2003,\n        \"maxMileage\": \"250000\",\n        \"model\": \"golf\",\n        \"brand\": \"vw\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVICE}}/search",
									"host": [
										"{{SERVICE}}"
									],
									"path": [
										"search"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "akka-http/10.1.11"
								},
								{
									"key": "Date",
									"value": "Mon, 13 Apr 2020 08:01:27 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "129"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 12,\n    \"userId\": 1,\n    \"params\": {\n        \"brand\": \"vw\",\n        \"maxYear\": \"2003\",\n        \"maxMileage\": \"250000\",\n        \"minYear\": \"1999\",\n        \"model\": \"golf\"\n    },\n    \"active\": true\n}"
						}
					]
				},
				{
					"name": "search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18f69877-8f5a-41a6-aa40-22ab879f1dba",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Added search has correct userId\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.userId).to.eql(1);",
									"});",
									"",
									"pm.test(\"Added search is active\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.active).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 1,\n    \"params\": {\n        \"year_from\": \"1999\",\n        \"year_to\": 2018,\n        \"mileage_to\": \"250000\",\n        \"model\": \"Zafira\",\n        \"brand\": \"Opel\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SERVICE}}/search",
							"host": [
								"{{SERVICE}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": [
						{
							"name": "create search",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 1,\n    \"params\": {\n        \"minYear\": \"1999\",\n        \"maxYear\": 2003,\n        \"maxMileage\": \"250000\",\n        \"model\": \"golf\",\n        \"brand\": \"vw\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVICE}}/search",
									"host": [
										"{{SERVICE}}"
									],
									"path": [
										"search"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "akka-http/10.1.11"
								},
								{
									"key": "Date",
									"value": "Mon, 13 Apr 2020 08:01:27 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "129"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 12,\n    \"userId\": 1,\n    \"params\": {\n        \"brand\": \"vw\",\n        \"maxYear\": \"2003\",\n        \"maxMileage\": \"250000\",\n        \"minYear\": \"1999\",\n        \"model\": \"golf\"\n    },\n    \"active\": true\n}"
						}
					]
				},
				{
					"name": "search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31b9ec91-9784-40ed-9d4b-63a6736410a8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response contains searches\", () => {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.searches).to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{SERVICE}}/search?userId={{userId}}",
							"host": [
								"{{SERVICE}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "active",
									"value": "false",
									"description": "optional",
									"disabled": true
								},
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deactivate search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "373cd261-52da-44cb-b973-00d1fabb9ad6",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Search is not active\", () => {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.active).to.eql(false);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{SERVICE}}/search/{{searchId}}/deactivate",
							"host": [
								"{{SERVICE}}"
							],
							"path": [
								"search",
								"{{searchId}}",
								"deactivate"
							],
							"query": [
								{
									"key": "active",
									"value": "false",
									"description": "optional",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "activate search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e916d4ff-2fe4-44af-9da0-b694b9a4047c",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Search is active\", () => {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.active).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{SERVICE}}/search/{{searchId}}/activate",
							"host": [
								"{{SERVICE}}"
							],
							"path": [
								"search",
								"{{searchId}}",
								"activate"
							],
							"query": [
								{
									"key": "active",
									"value": "false",
									"description": "optional",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tasks",
			"item": [
				{
					"name": "tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31b9ec91-9784-40ed-9d4b-63a6736410a8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response contains tasks\", () => {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.tasks).to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{SERVICE}}/tasks?userId={{userId}}&searchId={{searchId}}",
							"host": [
								"{{SERVICE}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "taskId",
									"value": "73427a7b-3f6f-45b9-b397-8315676dd079",
									"description": "optional",
									"disabled": true
								},
								{
									"key": "query",
									"value": "diesel",
									"description": "optional",
									"disabled": true
								},
								{
									"key": "searchId",
									"value": "{{searchId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "results",
			"item": [
				{
					"name": "results",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31b9ec91-9784-40ed-9d4b-63a6736410a8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response contains searches\", () => {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{SERVICE}}/results?userId={{userId}}&searchId={{searchId}}",
							"host": [
								"{{SERVICE}}"
							],
							"path": [
								"results"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "searchId",
									"value": "{{searchId}}"
								},
								{
									"key": "taskId",
									"value": "1eaddb44-5cf0-44a5-b48a-b37c7efb1d13",
									"description": "optional",
									"disabled": true
								},
								{
									"key": "query",
									"value": "diesel",
									"description": "optional",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "1d78b197-4cdd-456a-bf82-48b302620226",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "bef8e102-0c8c-4717-85b9-8675bdeb9fe2",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"CORS: Access-Control-Allow-Origin is present\", () => {",
					"    pm.response.to.have.header(\"Access-Control-Allow-Origin\");",
					"});",
					"",
					"pm.test(\"CORS: Access-Control-Allow-Origin equals *\", () => {",
					"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.equal(\"*\");",
					"});",
					"",
					"pm.test(\"CORS: Access-Control-Allow-Headers is present\", () => {",
					"    pm.response.to.have.header(\"Access-Control-Allow-Headers\");",
					"});",
					"",
					"pm.test(\"CORS: Access-Control-Allow-Headers equals *\", () => {",
					"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Headers\")).to.equal(\"Content-Type, Origin\");",
					"});",
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f506291a-c5fa-44e3-b1bf-46bd1dab4aa2",
			"key": "SERVICE",
			"value": "{{HOST}}:30001",
			"type": "string"
		},
		{
			"id": "475ddb08-cd40-4da0-86c4-912a1e7bd717",
			"key": "searchId",
			"value": "1",
			"type": "string"
		},
		{
			"id": "5cfee4c4-f728-474a-9d17-b4fb9c1f19b9",
			"key": "userId",
			"value": "1",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}